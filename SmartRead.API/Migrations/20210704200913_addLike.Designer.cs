// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SmartRead.API.Database.Context;

namespace SmartRead.API.Migrations
{
    [DbContext(typeof(SmartReadContext))]
    [Migration("20210704200913_addLike")]
    partial class addLike
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("SmartRead.API.Database.Clanak", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AutorId")
                        .HasColumnType("int");

                    b.Property<double>("Cijena")
                        .HasColumnType("float");

                    b.Property<string>("Naslov")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Obrisan")
                        .HasColumnType("bit");

                    b.Property<int?>("OdobravateljId")
                        .HasColumnType("int");

                    b.Property<bool>("Odobren")
                        .HasColumnType("bit");

                    b.Property<byte[]>("Slika")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AutorId");

                    b.HasIndex("OdobravateljId");

                    b.ToTable("Clanci");
                });

            modelBuilder.Entity("SmartRead.API.Database.ClanakKategorija", b =>
                {
                    b.Property<int>("ClanakId")
                        .HasColumnType("int");

                    b.Property<int>("KategorijaId")
                        .HasColumnType("int");

                    b.HasKey("ClanakId", "KategorijaId");

                    b.HasIndex("KategorijaId");

                    b.ToTable("ClanakKategorije");
                });

            modelBuilder.Entity("SmartRead.API.Database.Drzava", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Naziv")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Drzave");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Naziv = "Bosna i Hercegovina"
                        },
                        new
                        {
                            Id = 2,
                            Naziv = "Hrvatska"
                        });
                });

            modelBuilder.Entity("SmartRead.API.Database.Kategorija", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Naziv")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Obrisan")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Kategorije");
                });

            modelBuilder.Entity("SmartRead.API.Database.Korisnik", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DatumRegistracije")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DatumRodjenja")
                        .HasColumnType("datetime2");

                    b.Property<int>("DrzavaId")
                        .HasColumnType("int");

                    b.Property<string>("Ime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Kredit")
                        .HasColumnType("float");

                    b.Property<string>("Mail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Obrisan")
                        .HasColumnType("bit");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordSalt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prezime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Slika")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DrzavaId");

                    b.ToTable("Korisnici");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DatumRegistracije = new DateTime(2021, 7, 4, 22, 9, 13, 237, DateTimeKind.Local).AddTicks(7415),
                            DatumRodjenja = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DrzavaId = 1,
                            Ime = "Maid",
                            Kredit = 0.0,
                            Mail = "maid.beslagic@edu.fit.ba",
                            Obrisan = false,
                            PasswordHash = "V3Y6sIgV5t4Zvvke9PgezpL7sYTL7eczSzvDqgbp147jVydKgnJntDhYQY7mEIL50ide2+UOzj7owa4+vogQxw==",
                            PasswordSalt = "mERDDn6zsDGUZOwGOgrhOw==",
                            Prezime = "Bešlagić",
                            Username = "maid"
                        });
                });

            modelBuilder.Entity("SmartRead.API.Database.KorisnikClanak", b =>
                {
                    b.Property<int>("KorisnikId")
                        .HasColumnType("int");

                    b.Property<int>("ClanakId")
                        .HasColumnType("int");

                    b.Property<int>("BrojPosjeta")
                        .HasColumnType("int");

                    b.HasKey("KorisnikId", "ClanakId");

                    b.HasIndex("ClanakId");

                    b.ToTable("KorisnikClanci");
                });

            modelBuilder.Entity("SmartRead.API.Database.KorisnikKategorija", b =>
                {
                    b.Property<int>("KorisnikId")
                        .HasColumnType("int");

                    b.Property<int>("KategorijaId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DatumPretplate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Obrisan")
                        .HasColumnType("bit");

                    b.HasKey("KorisnikId", "KategorijaId");

                    b.HasIndex("KategorijaId");

                    b.ToTable("KorisnikKategorije");
                });

            modelBuilder.Entity("SmartRead.API.Database.KorisnikPrijava", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ClanakId")
                        .HasColumnType("int");

                    b.Property<int>("KorisnikId")
                        .HasColumnType("int");

                    b.Property<string>("Opis")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Pregledano")
                        .HasColumnType("bit");

                    b.Property<bool>("Uvazeno")
                        .HasColumnType("bit");

                    b.Property<DateTime>("VrijemePrijave")
                        .HasColumnType("datetime2");

                    b.Property<int>("VrstaPrijave")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClanakId");

                    b.HasIndex("KorisnikId");

                    b.ToTable("KorisnikPrijave");
                });

            modelBuilder.Entity("SmartRead.API.Database.KorisnikUloga", b =>
                {
                    b.Property<int>("KorisnikId")
                        .HasColumnType("int");

                    b.Property<int>("UlogaId")
                        .HasColumnType("int");

                    b.HasKey("KorisnikId", "UlogaId");

                    b.HasIndex("UlogaId");

                    b.ToTable("KorisnikUloge");

                    b.HasData(
                        new
                        {
                            KorisnikId = 1,
                            UlogaId = 1
                        },
                        new
                        {
                            KorisnikId = 1,
                            UlogaId = 2
                        });
                });

            modelBuilder.Entity("SmartRead.API.Database.Like", b =>
                {
                    b.Property<int>("KorisnikId")
                        .HasColumnType("int");

                    b.Property<int>("ClanakId")
                        .HasColumnType("int");

                    b.HasKey("KorisnikId", "ClanakId");

                    b.HasIndex("ClanakId");

                    b.ToTable("Likes");
                });

            modelBuilder.Entity("SmartRead.API.Database.Uloga", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Naziv")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Uloge");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Naziv = "Administrator"
                        },
                        new
                        {
                            Id = 2,
                            Naziv = "BasicUser"
                        });
                });

            modelBuilder.Entity("SmartRead.API.Database.Uplata", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<float>("Iznos")
                        .HasColumnType("real");

                    b.Property<int>("KorisnikId")
                        .HasColumnType("int");

                    b.Property<string>("Opis")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("KorisnikId");

                    b.ToTable("Uplate");
                });

            modelBuilder.Entity("SmartRead.API.Database.Clanak", b =>
                {
                    b.HasOne("SmartRead.API.Database.Korisnik", "Autor")
                        .WithMany("Clanci")
                        .HasForeignKey("AutorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartRead.API.Database.Korisnik", "Odobravatelj")
                        .WithMany()
                        .HasForeignKey("OdobravateljId");
                });

            modelBuilder.Entity("SmartRead.API.Database.ClanakKategorija", b =>
                {
                    b.HasOne("SmartRead.API.Database.Clanak", "Clanak")
                        .WithMany("Kategorije")
                        .HasForeignKey("ClanakId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartRead.API.Database.Kategorija", "Kategorija")
                        .WithMany()
                        .HasForeignKey("KategorijaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SmartRead.API.Database.Korisnik", b =>
                {
                    b.HasOne("SmartRead.API.Database.Drzava", "Drzava")
                        .WithMany()
                        .HasForeignKey("DrzavaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SmartRead.API.Database.KorisnikClanak", b =>
                {
                    b.HasOne("SmartRead.API.Database.Clanak", "Clanak")
                        .WithMany()
                        .HasForeignKey("ClanakId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartRead.API.Database.Korisnik", "Korisnik")
                        .WithMany()
                        .HasForeignKey("KorisnikId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SmartRead.API.Database.KorisnikKategorija", b =>
                {
                    b.HasOne("SmartRead.API.Database.Kategorija", "Kategorija")
                        .WithMany()
                        .HasForeignKey("KategorijaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartRead.API.Database.Korisnik", "Korisnik")
                        .WithMany("PretplaceneKategorije")
                        .HasForeignKey("KorisnikId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SmartRead.API.Database.KorisnikPrijava", b =>
                {
                    b.HasOne("SmartRead.API.Database.Clanak", "Clanak")
                        .WithMany("Prijave")
                        .HasForeignKey("ClanakId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartRead.API.Database.Korisnik", "Korisnik")
                        .WithMany("PrijavljeniClanci")
                        .HasForeignKey("KorisnikId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SmartRead.API.Database.KorisnikUloga", b =>
                {
                    b.HasOne("SmartRead.API.Database.Korisnik", "Korisnik")
                        .WithMany("Uloge")
                        .HasForeignKey("KorisnikId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartRead.API.Database.Uloga", "Uloga")
                        .WithMany()
                        .HasForeignKey("UlogaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SmartRead.API.Database.Like", b =>
                {
                    b.HasOne("SmartRead.API.Database.Clanak", "Clanak")
                        .WithMany()
                        .HasForeignKey("ClanakId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartRead.API.Database.Korisnik", "Korisnik")
                        .WithMany()
                        .HasForeignKey("KorisnikId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SmartRead.API.Database.Uplata", b =>
                {
                    b.HasOne("SmartRead.API.Database.Korisnik", "Korisnik")
                        .WithMany("Uplate")
                        .HasForeignKey("KorisnikId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
